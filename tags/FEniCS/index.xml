<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FEniCS on 学习笔记</title>
    <link>https://chaoskey.gitee.io/notes/tags/FEniCS/</link>
    <description>Recent content in FEniCS on 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>一切都是我的</copyright>
    <lastBuildDate>Sun, 21 Feb 2021 11:24:41 +0800</lastBuildDate><atom:link href="https://chaoskey.gitee.io/notes/tags/FEniCS/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unicorn：统一的连续介质力学求解器（下）【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0126/</link>
      <pubDate>Sun, 21 Feb 2021 11:24:41 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0126/</guid>
      <description>&lt;h1 id=&#34;ii实现18unicorn统一的连续介质力学求解器下&#34;&gt;II.实现》18.Unicorn：统一的连续介质力学求解器（下）&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e5%8d%81%e5%85%ab%e7%ab%a0-unicorn%e7%bb%9f%e4%b8%80%e7%9a%84%e8%bf%9e%e7%bb%ad%e4%bb%8b%e8%b4%a8%e5%8a%9b%e5%ad%a6%e6%b1%82%e8%a7%a3%e5%99%a8&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;h2 id=&#34;185-解决连续介质力学问题&#34;&gt;18·5 解决连续介质力学问题&lt;/h2&gt;
&lt;p&gt;在本节中，我们介绍一些使用Unicorn计算的示例。 第一个例子是没有自适应性的流固耦合问题，我们讨论了几何和子域的建模，系数（形式中使用的函数），主程序的参数和规范（运行求解器的接口）。 接下来，我们给出一个用自适应性解决湍流纯流体问题的示例，其中我们涵盖了对偶问题的数据建模，自适应回路，并指定了用于建模湍流边界层的滑移/摩擦边界条件。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unicorn：统一的连续介质力学求解器（中）【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0125/</link>
      <pubDate>Fri, 19 Feb 2021 11:04:02 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0125/</guid>
      <description>&lt;h1 id=&#34;ii实现18unicorn统一的连续介质力学求解器中&#34;&gt;II.实现》18.Unicorn：统一的连续介质力学求解器（中）&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e5%8d%81%e5%85%ab%e7%ab%a0-unicorn%e7%bb%9f%e4%b8%80%e7%9a%84%e8%bf%9e%e7%bb%ad%e4%bb%8b%e8%b4%a8%e5%8a%9b%e5%ad%a6%e6%b1%82%e8%a7%a3%e5%99%a8&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;h2 id=&#34;184-实现&#34;&gt;18·4 实现&lt;/h2&gt;
&lt;p&gt;在这里，我们概述了Unicorn的设计。 Unicorn求解器类&lt;code&gt;UCSolver&lt;/code&gt;将Unicorn库中的技术与FEniCS的其他部分结合，合在一起公开一个接口（请参见清单18.6），以模拟连续介质力学中的应用。 求解器实现的主要部分是UC模型的G2离散化的弱形式（请参见图18.4），以及用于误差估计的应力和残差的形式。 来自应用程序的系数被连接到形式，然后由&lt;code&gt;TimeDependentPDE&lt;/code&gt;类执行时间步进。 某些系数，例如
  
    

    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.css&#34; integrity=&#34;sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq&#34; crossorigin=&#34;anonymous&#34;&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.js&#34; integrity=&#34;sha384-y23I5Q6l+B6vatafAwxRu/0oK/79VlbSz7Q9aiSZUvyWYIYsd+qj+o24G5ZU2zJz&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/contrib/auto-render.min.js&#34; integrity=&#34;sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI&#34; crossorigin=&#34;anonymous&#34;
            onload=&#34;renderMathInElement(document.body,
                {delimiters: [{left: &#39;$$\n&#39;, right: &#39;\n$$&#39;, display: true}, {left: &#39;$$&#39;, right: &#39;$$&#39;, display: false}, 
                              {left: &#39;\\[&#39;, right: &#39;\\]&#39;, display: true}, {left: &#39;\\(&#39;, right: &#39;\\)&#39;, display: false}]});&#34;&gt;&lt;/script&gt;
    
  




&lt;span class=&#34;katex&#34;&gt;
  \(\delta\)
&lt;/span&gt;
稳定化系数，也作为求解器的一部分（而不是作为形式）来进行计算。 求解器计算自适应算法的一次迭代（主求解，对偶求解和网格划分），其中，自适应循环是通过迭代运行一系列网格的求解器来实现的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unicorn：统一的连续介质力学求解器（上）【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0124/</link>
      <pubDate>Sat, 06 Feb 2021 10:38:14 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0124/</guid>
      <description>&lt;h1 id=&#34;ii实现18unicorn统一的连续介质力学求解器上&#34;&gt;II.实现》18.Unicorn：统一的连续介质力学求解器（上）&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e5%8d%81%e5%85%ab%e7%ab%a0-unicorn%e7%bb%9f%e4%b8%80%e7%9a%84%e8%bf%9e%e7%bb%ad%e4%bb%8b%e8%b4%a8%e5%8a%9b%e5%ad%a6%e6%b1%82%e8%a7%a3%e5%99%a8&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;p&gt;本章介绍了Unicorn技术，重点介绍了用于统一连续介质（UC）概念和自适应通用Galerkin（G2）离散化的简单，高效和通用算法和软件，将其作为统一的连续介质力学方法。 我们将介绍Unicorn如何适应FEniCS框架，如何为其他FEniCS组件提供接口，Unicorn提供了哪些接口和功能以及如何设计实现的。 我们还将介绍一些使用Unicorn计算的流固耦合（ﬂuid–structure interaction）和适应性的例子。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UFL：有限元形式语言》算法(二)&amp;实现的问题【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0123/</link>
      <pubDate>Thu, 04 Feb 2021 11:01:25 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0123/</guid>
      <description>&lt;h1 id=&#34;ii实现17ufl有限元形式语言算法二实现的问题&#34;&gt;II.实现》17.UFL：有限元形式语言》算法(二)&amp;amp;实现的问题&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e5%8d%81%e4%b8%83%e7%ab%a0-ufl%e6%9c%89%e9%99%90%e5%85%83%e5%bd%a2%e5%bc%8f%e8%af%ad%e8%a8%80&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;h2 id=&#34;178-算法续前&#34;&gt;17·8 算法（续前）&lt;/h2&gt;
&lt;h3 id=&#34;1784-重要的变换&#34;&gt;17·8·4 重要的变换&lt;/h3&gt;
&lt;p&gt;有很多方法可以操纵表达式的表示。 在这里，我们描述了三个特别重要的变换。 注意，这里每一个算法都删除了一些抽象，因此可能删除了一些分析或优化的机会。 为了展示其效果，下面将每种变换应用到下面的表达式&lt;/p&gt;

  
    

    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.css&#34; integrity=&#34;sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq&#34; crossorigin=&#34;anonymous&#34;&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.js&#34; integrity=&#34;sha384-y23I5Q6l+B6vatafAwxRu/0oK/79VlbSz7Q9aiSZUvyWYIYsd+qj+o24G5ZU2zJz&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/contrib/auto-render.min.js&#34; integrity=&#34;sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI&#34; crossorigin=&#34;anonymous&#34;
            onload=&#34;renderMathInElement(document.body,
                {delimiters: [{left: &#39;$$\n&#39;, right: &#39;\n$$&#39;, display: true}, {left: &#39;$$&#39;, right: &#39;$$&#39;, display: false}, 
                              {left: &#39;\\[&#39;, right: &#39;\\]&#39;, display: true}, {left: &#39;\\(&#39;, right: &#39;\\)&#39;, display: false}]});&#34;&gt;&lt;/script&gt;
    
  




&lt;span class=&#34;katex&#34;&gt;
  \[
a = \mathrm{grad}(f u) \cdot \mathrm{grad}\ v \tag{17.77}
\]
&lt;/span&gt;

&lt;p&gt;在本节的最后，给出了一些示例代码来演示更多的表示细节。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UFL：有限元形式语言》计算导数&amp;算法(一)【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0122/</link>
      <pubDate>Wed, 03 Feb 2021 07:32:33 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0122/</guid>
      <description>&lt;h1 id=&#34;ii实现17ufl有限元形式语言计算导数算法一&#34;&gt;II.实现》17.UFL：有限元形式语言》计算导数&amp;amp;算法(一)&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e5%8d%81%e4%b8%83%e7%ab%a0-ufl%e6%9c%89%e9%99%90%e5%85%83%e5%bd%a2%e5%bc%8f%e8%af%ad%e8%a8%80&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;h2 id=&#34;177-计算导数&#34;&gt;17·7 计算导数&lt;/h2&gt;
&lt;p&gt;当由形式语言的终端用户声明任何种类的导数表达式时，都会构造一个表达式对象来表示它，但不会计算任何内容。 这种表达式对象的类型是Derivative的子类。在从导数表达式生成低级代码之前，必须应用某种求导数的算法，因为差分算符本身在C++等低级语言中不可用。 计算精确的导数很重要，它消除了差分除法的近似。 存在几种用于计算精确导数的替代算法。 所有相关算法都基于链规则，并结合每种表达式对象类型的规则差异。 算法之间的主要区别在于子表达式的重用程度以及子表达式的累积方式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UFL：有限元形式语言》形式算符&amp;表达式的表示【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0121/</link>
      <pubDate>Tue, 02 Feb 2021 12:56:05 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0121/</guid>
      <description>&lt;h1 id=&#34;ii实现17ufl有限元形式语言形式算符表达式的表示&#34;&gt;II.实现》17.UFL：有限元形式语言》形式算符&amp;amp;表达式的表示&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e5%8d%81%e4%b8%83%e7%ab%a0-ufl%e6%9c%89%e9%99%90%e5%85%83%e5%bd%a2%e5%bc%8f%e8%af%ad%e8%a8%80&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;h2 id=&#34;175-形式算符&#34;&gt;17·5 形式算符&lt;/h2&gt;
&lt;p&gt;一旦定义了一些形式，就有几种方法可以从中计算相关的形式。  上节的算符可用于定义表达式，本节中讨论的算符被用于形式，从而生成新的形式。 形式算符既可以使形式的定义更紧凑，又可以减少错误的可能，因为原始形式中的更改将自动传播到根据它所计算出的形式中。 这些形式算符可以任意组合； 给定一个半线性形式，只需要几条行即可计算出雅可比伴随的作用。  由于这些计算是在形式编译器处理之前完成的，因此在运行时没有任何开销。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UFL：有限元形式语言》表达式【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0120/</link>
      <pubDate>Mon, 01 Feb 2021 10:46:53 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0120/</guid>
      <description>&lt;h1 id=&#34;ii实现17ufl有限元形式语言表达式&#34;&gt;II.实现》17.UFL：有限元形式语言》表达式&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e5%8d%81%e4%b8%83%e7%ab%a0-ufl%e6%9c%89%e9%99%90%e5%85%83%e5%bd%a2%e5%bc%8f%e8%af%ad%e8%a8%80&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;h2 id=&#34;174-定义表达式&#34;&gt;17·4 定义表达式&lt;/h2&gt;
&lt;p&gt;UFL的大多数内容涉及如何声明表达式，例如公式17.13中的积分表达式。 最基本的表达式是终值，它们不依赖于其他表达式。  其他表达式称为算符，将在17.4.2-17.4.5节中讨论。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UFL：有限元形式语言》概述&amp;有限元空间&amp;形式【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0119/</link>
      <pubDate>Sun, 31 Jan 2021 09:41:19 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0119/</guid>
      <description>&lt;h1 id=&#34;ii实现17ufl有限元形式语言概述有限元空间形式&#34;&gt;II.实现》17.UFL：有限元形式语言》概述&amp;amp;有限元空间&amp;amp;形式&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e5%8d%81%e4%b8%83%e7%ab%a0-ufl%e6%9c%89%e9%99%90%e5%85%83%e5%bd%a2%e5%bc%8f%e8%af%ad%e8%a8%80&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;p&gt;统一形式语言（UFL，Alnæs和Logg，2009年）是一种领域专用语言，用于描述变分形式和函数的有限元离散化。 更准确地说，该语言定义了一个灵活的用户接口，用于定义近似于数学符号弱形式的有限元空间和表达式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DOLFIN：C&#43;&#43;/Python有限元库》注记【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0118/</link>
      <pubDate>Wed, 13 Jan 2021 20:31:21 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0118/</guid>
      <description>&lt;h1 id=&#34;ii实现10dolfincpython有限元库注记&#34;&gt;II.实现》10.DOLFIN：C++/Python有限元库》注记&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e5%8d%81%e7%ab%a0-dolfincpython%e6%9c%89%e9%99%90%e5%85%83%e5%ba%93&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;h2 id=&#34;104-实现注记&#34;&gt;10·4 实现注记&lt;/h2&gt;
&lt;p&gt;在本节中，我们讨论DOLFIN实现的特定方面，包括并行计算，Python接口的生成，以及即时编译。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DOLFIN：C&#43;&#43;/Python有限元库》日志/诊断/参数【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0117/</link>
      <pubDate>Tue, 12 Jan 2021 20:56:49 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0117/</guid>
      <description>&lt;h1 id=&#34;ii实现10dolfincpython有限元库日志诊断参数&#34;&gt;II.实现》10.DOLFIN：C++/Python有限元库》日志/诊断/参数&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e5%8d%81%e7%ab%a0-dolfincpython%e6%9c%89%e9%99%90%e5%85%83%e5%ba%93&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;h3 id=&#34;10312-日志诊断&#34;&gt;10·3·12 日志／诊断&lt;/h3&gt;
&lt;p&gt;DOLFIN提供了一个简单的接口来统一处理日志消息，包括警告和错误。  所有消息都收集到单个流中，这使整个程序（包括DOLFIN库）的输出的目的地和格式可由用户控制。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DOLFIN：C&#43;&#43;/Python有限元库》变分问题/文件/可视化【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0116/</link>
      <pubDate>Mon, 11 Jan 2021 18:33:03 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0116/</guid>
      <description>&lt;h1 id=&#34;ii实现10dolfincpython有限元库变分问题文件可视化&#34;&gt;II.实现》10.DOLFIN：C++/Python有限元库》变分问题/文件/可视化&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e5%8d%81%e7%ab%a0-dolfincpython%e6%9c%89%e9%99%90%e5%85%83%e5%ba%93&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;h3 id=&#34;10310-变分问题&#34;&gt;10·3·10 变分问题&lt;/h3&gt;
&lt;p&gt;变分问题（偏微分方程的有限元离散化）可以在DOLFIN中使用&lt;code&gt;solve&lt;/code&gt;函数轻松解决。  线性和非线性问题都可以解决。  线性问题必须表示为以下规范形式：寻求
  
    

    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.css&#34; integrity=&#34;sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq&#34; crossorigin=&#34;anonymous&#34;&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.js&#34; integrity=&#34;sha384-y23I5Q6l+B6vatafAwxRu/0oK/79VlbSz7Q9aiSZUvyWYIYsd+qj+o24G5ZU2zJz&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/contrib/auto-render.min.js&#34; integrity=&#34;sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI&#34; crossorigin=&#34;anonymous&#34;
            onload=&#34;renderMathInElement(document.body,
                {delimiters: [{left: &#39;$$\n&#39;, right: &#39;\n$$&#39;, display: true}, {left: &#39;$$&#39;, right: &#39;$$&#39;, display: false}, 
                              {left: &#39;\\[&#39;, right: &#39;\\]&#39;, display: true}, {left: &#39;\\(&#39;, right: &#39;\\)&#39;, display: false}]});&#34;&gt;&lt;/script&gt;
    
  




&lt;span class=&#34;katex&#34;&gt;
  \(u \in V\)
&lt;/span&gt;
使得&lt;/p&gt;



&lt;span class=&#34;katex&#34;&gt;
  \[
a(u, v) = L(v) \qquad \forall  v \in \hat{V} \tag{10.8}
\]
&lt;/span&gt;</description>
    </item>
    
    <item>
      <title>DOLFIN：C&#43;&#43;/Python有限元库》变分形式/组装/边界条件【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0115/</link>
      <pubDate>Mon, 11 Jan 2021 09:27:35 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0115/</guid>
      <description>&lt;h1 id=&#34;ii实现10dolfincpython有限元库变分形式组装边界条件&#34;&gt;II.实现》10.DOLFIN：C++/Python有限元库》变分形式/组装/边界条件&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e5%8d%81%e7%ab%a0-dolfincpython%e6%9c%89%e9%99%90%e5%85%83%e5%ba%93&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;h3 id=&#34;1037-变分形式&#34;&gt;10·3·7 变分形式&lt;/h3&gt;
&lt;p&gt;DOLFIN依靠FEniCS工具链FIAT–UFL–FFC / SFC–UFC来计算有限元变分形式。  使用形式编译器FFC或SFC（第11章和第15章）之一来编译以UFL形式语言表示的变分形式（第17章），DOLFIN使用生成的UFC代码（第16章）来计算（组装）变分形式 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DOLFIN：C&#43;&#43;/Python有限元库》有限元/函数/表达式【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0114/</link>
      <pubDate>Sat, 09 Jan 2021 09:19:08 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0114/</guid>
      <description>&lt;h1 id=&#34;ii实现10dolfincpython有限元库有限元函数表达式&#34;&gt;II.实现》10.DOLFIN：C++/Python有限元库》有限元/函数/表达式&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e5%8d%81%e7%ab%a0-dolfincpython%e6%9c%89%e9%99%90%e5%85%83%e5%ba%93&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;h3 id=&#34;1033-有限元&#34;&gt;10·3·3 有限元&lt;/h3&gt;
&lt;p&gt;第2章和第3章讨论的有限元的概念（Ciarlet定义）是由DOLFIN FiniteElement类实现的。  此类在C++和Python接口中的实现方式有所不同。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DOLFIN：C&#43;&#43;/Python有限元库》网格【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0113/</link>
      <pubDate>Fri, 08 Jan 2021 10:12:53 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0113/</guid>
      <description>&lt;h1 id=&#34;ii实现10dolfincpython有限元库网格&#34;&gt;II.实现》10.DOLFIN：C++/Python有限元库》网格&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e5%8d%81%e7%ab%a0-dolfincpython%e6%9c%89%e9%99%90%e5%85%83%e5%ba%93&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;h3 id=&#34;1032-网格&#34;&gt;10·3·2 网格&lt;/h3&gt;
&lt;p&gt;DOLFIN的核心部分是其网格库和Mesh类。  网格库为计算网格提供了数据结构和算法，包括网格连通性（重合关系），网格细化，网格划分和网格相交的计算。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DOLFIN：C&#43;&#43;/Python有限元库》线性代数【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0112/</link>
      <pubDate>Thu, 07 Jan 2021 10:05:30 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0112/</guid>
      <description>&lt;h1 id=&#34;ii实现10dolfincpython有限元库线性代数&#34;&gt;II.实现》10.DOLFIN：C++/Python有限元库》线性代数&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e5%8d%81%e7%ab%a0-dolfincpython%e6%9c%89%e9%99%90%e5%85%83%e5%ba%93&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;h2 id=&#34;103-功能&#34;&gt;10·3 功能&lt;/h2&gt;
&lt;p&gt;DOLFIN被组织为库（模块）的集合，每个库都覆盖某个功能区域。  我们在这里回顾这些领域，并解释最常用的类和函数的用途和用法。  回顾是自下而上的； 也就是说，我们首先描述DOLFIN的核心低层功能（线性代数和网格），然后向上移动以描述高层功能。  有关更多详细信息，请参阅FEniCS项目网页上的DOLFIN程序员参考和Logg and Wells（2010）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DOLFIN：C&#43;&#43;/Python有限元库》概述/接口【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0111/</link>
      <pubDate>Wed, 06 Jan 2021 16:58:50 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0111/</guid>
      <description>&lt;h1 id=&#34;ii实现10dolfincpython有限元库概述接口&#34;&gt;II.实现》10.DOLFIN：C++/Python有限元库》概述/接口&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e5%8d%81%e7%ab%a0-dolfincpython%e6%9c%89%e9%99%90%e5%85%83%e5%ba%93&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;p&gt;DOLFIN是一个用作FEniCS主要用户接口的C++/Python库。  在本章中，我们将回顾DOLFIN的功能。  我们还将详细讨论DOLFIN某些关键特性的实现。  有关DOLFIN的设计和实现的一般讨论，请参见Logg and Wells（2010）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>有限元矩阵计算的离散优化【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0110/</link>
      <pubDate>Wed, 06 Jan 2021 13:19:50 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0110/</guid>
      <description>&lt;h1 id=&#34;i方法论9有限元矩阵计算的离散优化&#34;&gt;I.方法论》9.有限元矩阵计算的离散优化&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e4%b9%9d%e7%ab%a0-%e6%9c%89%e9%99%90%e5%85%83%e7%9f%a9%e9%98%b5%e8%ae%a1%e7%ae%97%e7%9a%84%e7%a6%bb%e6%95%a3%e4%bc%98%e5%8c%96&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;p&gt;第8章中，用于单元张量
  
    

    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.css&#34; integrity=&#34;sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq&#34; crossorigin=&#34;anonymous&#34;&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.js&#34; integrity=&#34;sha384-y23I5Q6l+B6vatafAwxRu/0oK/79VlbSz7Q9aiSZUvyWYIYsd+qj+o24G5ZU2zJz&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/contrib/auto-render.min.js&#34; integrity=&#34;sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI&#34; crossorigin=&#34;anonymous&#34;
            onload=&#34;renderMathInElement(document.body,
                {delimiters: [{left: &#39;$$\n&#39;, right: &#39;\n$$&#39;, display: true}, {left: &#39;$$&#39;, right: &#39;$$&#39;, display: false}, 
                              {left: &#39;\\[&#39;, right: &#39;\\]&#39;, display: true}, {left: &#39;\\(&#39;, right: &#39;\\)&#39;, display: false}]});&#34;&gt;&lt;/script&gt;
    
  




&lt;span class=&#34;katex&#34;&gt;
  \(A_T\)
&lt;/span&gt;
计算的张量缩并结构不仅可以构造变分形式编译器，而且还可以优化编译器。  对于典型的变分形式，参考张量


&lt;span class=&#34;katex&#34;&gt;
  \(A^0\)
&lt;/span&gt;
具有显著的结构，允许以较低计算成本在任意胞元


&lt;span class=&#34;katex&#34;&gt;
  \(T\)
&lt;/span&gt;
上计算单元张量


&lt;span class=&#34;katex&#34;&gt;
  \(A_T\)
&lt;/span&gt;
。  利用这种结构减少运算次数，自然会导致离散数学中的几个问题。  本章介绍了一些可能的优化，并讨论了构成FErari项目核心的编译时组合优化问题（Kirby等，2006； Kirby和Scott，2007； Kirby和Logg，2008），这是 第12章的主题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>有限元变分形式的张量表示【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0109/</link>
      <pubDate>Tue, 05 Jan 2021 14:13:50 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0109/</guid>
      <description>&lt;h1 id=&#34;i方法论8有限元变分形式的张量表示&#34;&gt;I.方法论》8.有限元变分形式的张量表示&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e5%85%ab%e7%ab%a0-%e6%9c%89%e9%99%90%e5%85%83%e5%8f%98%e5%88%86%e5%bd%a2%e5%bc%8f%e7%9a%84%e5%bc%a0%e9%87%8f%e8%a1%a8%e7%a4%ba&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;p&gt;在第6章中，对有限元变分问题离散化，我们看到在矩阵和向量组装中的一个重要步骤是计算由下式定义的胞元（单元）张量
  
    

    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.css&#34; integrity=&#34;sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq&#34; crossorigin=&#34;anonymous&#34;&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.js&#34; integrity=&#34;sha384-y23I5Q6l+B6vatafAwxRu/0oK/79VlbSz7Q9aiSZUvyWYIYsd+qj+o24G5ZU2zJz&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/contrib/auto-render.min.js&#34; integrity=&#34;sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI&#34; crossorigin=&#34;anonymous&#34;
            onload=&#34;renderMathInElement(document.body,
                {delimiters: [{left: &#39;$$\n&#39;, right: &#39;\n$$&#39;, display: true}, {left: &#39;$$&#39;, right: &#39;$$&#39;, display: false}, 
                              {left: &#39;\\[&#39;, right: &#39;\\]&#39;, display: true}, {left: &#39;\\(&#39;, right: &#39;\\)&#39;, display: false}]});&#34;&gt;&lt;/script&gt;
    
  




&lt;span class=&#34;katex&#34;&gt;
  \(A_T\)
&lt;/span&gt;
&lt;/p&gt;



&lt;span class=&#34;katex&#34;&gt;
  \[
A_{T,i} = a_T(\phi_{i_\rho}^{T,\rho}, \dots , \phi_{i_2}^{T,2}, \phi_{i_1}^{T,1}) \tag{8.1}
\]
&lt;/span&gt;

&lt;p&gt;这里，


&lt;span class=&#34;katex&#34;&gt;
  \(a_T\)
&lt;/span&gt;
是对多重线性形式


&lt;span class=&#34;katex&#34;&gt;
  \(a:V_\rho\times\dots\times V_2\times V_1 \to \mathbb{R}\)
&lt;/span&gt;
的局部贡献，


&lt;span class=&#34;katex&#34;&gt;
  \(i=(i_1,i_2,\dots,i_\rho)\)
&lt;/span&gt;
是长为


&lt;span class=&#34;katex&#34;&gt;
  \(\rho\)
&lt;/span&gt;
的多重指标，并且


&lt;span class=&#34;katex&#34;&gt;
  \(\{\phi_k^{T,j}\}^{n_j}_{k=1}\)
&lt;/span&gt;
是局部胞元


&lt;span class=&#34;katex&#34;&gt;
  \(T\)
&lt;/span&gt;
上的局部有限元空间


&lt;span class=&#34;katex&#34;&gt;
  \(V_{j,h} \subset V_j,\quad j = 1, 2, \dots, \rho\)
&lt;/span&gt;
的基底。  在本章中，我们描述了如何通过称为&lt;code&gt;张量表示&lt;/code&gt;的方法来有效地计算胞元张量


&lt;span class=&#34;katex&#34;&gt;
  \(A_T\)
&lt;/span&gt;
。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>有限元变分形式的正交表示（二）【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0108/</link>
      <pubDate>Tue, 05 Jan 2021 08:24:50 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0108/</guid>
      <description>&lt;h1 id=&#34;i方法论7有限元变分形式的正交表示二&#34;&gt;I.方法论》7.有限元变分形式的正交表示（二）&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e4%b8%83%e7%ab%a0-%e6%9c%89%e9%99%90%e5%85%83%e5%8f%98%e5%88%86%e5%bd%a2%e5%bc%8f%e7%9a%84%e6%ad%a3%e4%ba%a4%e8%a1%a8%e7%a4%ba&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;h2 id=&#34;73-性能比较&#34;&gt;7·3 性能比较&lt;/h2&gt;
&lt;p&gt;在本节中，我们研究上一节概述的优化策略对运行时性能的影响。  关键不是要对优化进行严格的分析，而是要提供有关不同策略何时最有效的指示。  我们还将比较正交表示和张量表示的运行时性能（在第8章中进行了介绍），以说明两种方法的优缺点。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>有限元变分形式的正交表示（一）【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0107/</link>
      <pubDate>Mon, 04 Jan 2021 16:43:35 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0107/</guid>
      <description>&lt;h1 id=&#34;i方法论7有限元变分形式的正交表示一&#34;&gt;I.方法论》7.有限元变分形式的正交表示（一）&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e4%b8%83%e7%ab%a0-%e6%9c%89%e9%99%90%e5%85%83%e5%8f%98%e5%88%86%e5%bd%a2%e5%bc%8f%e7%9a%84%e6%ad%a3%e4%ba%a4%e8%a1%a8%e7%a4%ba&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;p&gt;本章介绍了与有限元变分形式相关的局部单元张量数值积分的常规运行时正交方法，尤其是可以减少浮点运算次数的自动优化。  运行时正交方法的替代方法是第8章中介绍的张量表示。  正交和张量方法都在FFC中实现了（参见第11章）。  在本章中，我们讨论了四种用于优化所生成代码的运行时性能的正交表示策略，并表明优化策略比单纯的实现带来了运行时性能的显着提高。  我们还研究了针对不同方程的正交和张量方法的性能，这将导致人们希望能够在两种表示形式之间进行选择。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>有限元组装【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0106/</link>
      <pubDate>Sun, 03 Jan 2021 16:42:15 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0106/</guid>
      <description>&lt;h1 id=&#34;i方法论6有限元组装&#34;&gt;I.方法论》6.有限元组装&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e5%85%ad%e7%ab%a0-%e6%9c%89%e9%99%90%e5%85%83%e7%bb%84%e8%a3%85&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;p&gt;有限元方法可以看作是形成离散线性系统
  
    

    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.css&#34; integrity=&#34;sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq&#34; crossorigin=&#34;anonymous&#34;&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.js&#34; integrity=&#34;sha384-y23I5Q6l+B6vatafAwxRu/0oK/79VlbSz7Q9aiSZUvyWYIYsd+qj+o24G5ZU2zJz&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/contrib/auto-render.min.js&#34; integrity=&#34;sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI&#34; crossorigin=&#34;anonymous&#34;
            onload=&#34;renderMathInElement(document.body,
                {delimiters: [{left: &#39;$$\n&#39;, right: &#39;\n$$&#39;, display: true}, {left: &#39;$$&#39;, right: &#39;$$&#39;, display: false}, 
                              {left: &#39;\\[&#39;, right: &#39;\\]&#39;, display: true}, {left: &#39;\\(&#39;, right: &#39;\\)&#39;, display: false}]});&#34;&gt;&lt;/script&gt;
    
  




&lt;span class=&#34;katex&#34;&gt;
  \(AU = b\)
&lt;/span&gt;
或非线性系统


&lt;span class=&#34;katex&#34;&gt;
  \(b(U)= 0\)
&lt;/span&gt;
的方法，对应于微分方程变分形式的离散化。 因此，有限元方法实现的核心部分是根据变分形式计算矩阵和向量。  在本章中，我们描述了用于计算离散算符（张量）


&lt;span class=&#34;katex&#34;&gt;
  \(A\)
&lt;/span&gt;
的标准算法。  将此算法称为&lt;code&gt;有限元组装&lt;/code&gt;（ﬁnite element assembly）。  我们还将讨论标准算法的效率以及对无矩阵方法的扩展。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>有限元变分形式【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0105/</link>
      <pubDate>Sat, 02 Jan 2021 22:00:53 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0105/</guid>
      <description>&lt;h1 id=&#34;i方法论5有限元变分形式&#34;&gt;I.方法论》5.有限元变分形式&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e5%85%ad%e7%ab%a0-%e6%9c%89%e9%99%90%e5%85%83%e7%bb%84%e8%a3%85&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;p&gt;FEniCS软件的大部分都致力于变分形式的公式（UFL），变分形式的离散化（FIAT，FFC，SyFi）以及相应离散运算（UFC，DOLFIN）的组装。  本章总结了FEniCS所使用变分形式的表示。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>构造通用参考单元（二）【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0104/</link>
      <pubDate>Fri, 01 Jan 2021 08:41:20 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0104/</guid>
      <description>&lt;h1 id=&#34;i方法论4构造通用参考单元二&#34;&gt;I.方法论》4.构造通用参考单元（二）&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e5%9b%9b%e7%ab%a0-%e6%9e%84%e9%80%a0%e9%80%9a%e7%94%a8%e5%8f%82%e8%80%83%e5%8d%95%e5%85%83&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;h2 id=&#34;44-单元的例子&#34;&gt;4·4 单元的例子&lt;/h2&gt;
&lt;p&gt;我们用一些标准的有限元来说明这些概念。 也请读者参考第3章，以便更全面地审查单元及其属性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>构造通用参考单元（一）【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0103/</link>
      <pubDate>Thu, 24 Dec 2020 12:47:48 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0103/</guid>
      <description>&lt;h1 id=&#34;i方法论4构造通用参考单元一&#34;&gt;I.方法论》4.构造通用参考单元（一）&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e5%9b%9b%e7%ab%a0-%e6%9e%84%e9%80%a0%e9%80%9a%e7%94%a8%e5%8f%82%e8%80%83%e5%8d%95%e5%85%83&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;p&gt;本章介绍了在参考域上构造通用有限元类的数学框架。 FIAT和SyFi项目均使用此框架，请分别参见第13章和第15章。 我们的目标是提供一个框架，可以自动构建具有非常复杂基底的单纯有限元。 我们从有限元的经典Ciarlet定义及其“节点”基底（这个抽象概念，比标准的面向节点的拉格朗日多项式更加通用和强大）出发开展工作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>常见有限元（三）【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0102/</link>
      <pubDate>Tue, 22 Dec 2020 10:35:40 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0102/</guid>
      <description>&lt;h1 id=&#34;i方法论3常见有限元三&#34;&gt;I.方法论》3.常见有限元（三）&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e4%b8%89%e7%ab%a0-%e5%b8%b8%e8%a7%81%e6%9c%89%e9%99%90%e5%85%83&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;h2 id=&#34;36-l-有限元&#34;&gt;3·6 L² 有限元&lt;/h2&gt;
&lt;p&gt;
  
    

    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.css&#34; integrity=&#34;sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq&#34; crossorigin=&#34;anonymous&#34;&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.js&#34; integrity=&#34;sha384-y23I5Q6l+B6vatafAwxRu/0oK/79VlbSz7Q9aiSZUvyWYIYsd+qj+o24G5ZU2zJz&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/contrib/auto-render.min.js&#34; integrity=&#34;sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI&#34; crossorigin=&#34;anonymous&#34;
            onload=&#34;renderMathInElement(document.body,
                {delimiters: [{left: &#39;$$\n&#39;, right: &#39;\n$$&#39;, display: true}, {left: &#39;$$&#39;, right: &#39;$$&#39;, display: false}, 
                              {left: &#39;\\[&#39;, right: &#39;\\]&#39;, display: true}, {left: &#39;\\(&#39;, right: &#39;\\)&#39;, display: false}]});&#34;&gt;&lt;/script&gt;
    
  




&lt;span class=&#34;katex&#34;&gt;
  \(L^2\)
&lt;/span&gt;
单元，通常指的是其元素非


&lt;span class=&#34;katex&#34;&gt;
  \(C^0\)
&lt;/span&gt;
的有限元空间。 这些单元自然存在于泊松方程，Stokes流和弹性的混合公式中。 或者，这样的单元也可以以不符合的方式被使用，而不是直接施以所期望的弱连续性。 不连续Galerkin（DG）方法为此提供了一个典型例子。 在这种情况下，单元维面的数值通量被组合为弱形式的一部分。 DG方法的许多变体就是以不同的数值通量来定义的。 DG方法最初是针对双曲问题开发的，但现已成功应用于许多椭圆和抛物线问题中。 而且，每个单独单元的去耦化为并行性和hp适应性提供了更多的机会。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>常见有限元（二）【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0101/</link>
      <pubDate>Mon, 21 Dec 2020 13:59:23 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0101/</guid>
      <description>&lt;h1 id=&#34;i方法论3常见有限元二&#34;&gt;I.方法论》3.常见有限元（二）&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e4%b8%89%e7%ab%a0-%e5%b8%b8%e8%a7%81%e6%9c%89%e9%99%90%e5%85%83&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;h2 id=&#34;34-hdiv有限元&#34;&gt;3·4 H（div）有限元&lt;/h2&gt;
&lt;p&gt;Sobolev空间
  
    

    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.css&#34; integrity=&#34;sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq&#34; crossorigin=&#34;anonymous&#34;&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.js&#34; integrity=&#34;sha384-y23I5Q6l+B6vatafAwxRu/0oK/79VlbSz7Q9aiSZUvyWYIYsd+qj+o24G5ZU2zJz&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/contrib/auto-render.min.js&#34; integrity=&#34;sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI&#34; crossorigin=&#34;anonymous&#34;
            onload=&#34;renderMathInElement(document.body,
                {delimiters: [{left: &#39;$$\n&#39;, right: &#39;\n$$&#39;, display: true}, {left: &#39;$$&#39;, right: &#39;$$&#39;, display: false}, 
                              {left: &#39;\\[&#39;, right: &#39;\\]&#39;, display: true}, {left: &#39;\\(&#39;, right: &#39;\\)&#39;, display: false}]});&#34;&gt;&lt;/script&gt;
    
  




&lt;span class=&#34;katex&#34;&gt;
  \(H(\mathrm{div})\)
&lt;/span&gt;
由分量和弱散度（the weak divergence）都平方可积的&lt;code&gt;矢量场&lt;/code&gt;组成。 这是一个比d-矢量场（


&lt;span class=&#34;katex&#34;&gt;
  \([H^1]^d, \quad d \ge 2\)
&lt;/span&gt;
）还要更弱的要求。 这个空间自然是与二阶椭圆问题，多孔介质流和弹性方程的混合形式有关的。 对于


&lt;span class=&#34;katex&#34;&gt;
  \(H(\mathrm{div})\)
&lt;/span&gt;
-符合的有限元族，虽然每个分量不必是连续的，但是法向分量必须是连续的。 为了确保这种连续性，


&lt;span class=&#34;katex&#34;&gt;
  \(H(\mathrm{div})\)
&lt;/span&gt;
-符合的单元的自由度通常包括单元的维面（facets）上的法向分量。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>常见有限元（一）【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0100/</link>
      <pubDate>Sat, 19 Dec 2020 17:51:51 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0100/</guid>
      <description>&lt;h1 id=&#34;i方法论3常见有限元一&#34;&gt;I.方法论》3.常见有限元（一）&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e4%b8%89%e7%ab%a0-%e5%b8%b8%e8%a7%81%e6%9c%89%e9%99%90%e5%85%83&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;p&gt;本章简要介绍了文献中的有限元。 这里介绍的许多单元已经作为FEniCS项目的一部分实现了； 一些是未来的工作。 有限元的范围远远超出了我们在此考虑的范围。 特别是，我们仅考虑基于简单多项式的单元。 因此，我们绕过了在四边形和六面体，复合和宏单元技术以及XFEM类型方法中定义的单元。 即使在基于简单多项式单元中，也可以扩展单元列表。 尽管如此，本章还是全面介绍了一些最常见的和较不寻常的有限元。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>有限元方法（三）【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0099/</link>
      <pubDate>Fri, 18 Dec 2020 15:43:50 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0099/</guid>
      <description>&lt;h1 id=&#34;i方法论2有限元方法三&#34;&gt;I.方法论》2.有限元方法（三）&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e4%ba%8c%e7%ab%a0-%e6%9c%89%e9%99%90%e5%85%83%e6%96%b9%e6%b3%95&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;h2 id=&#34;26-有限元误差估计和适应性&#34;&gt;2·6 有限元误差估计和适应性&lt;/h2&gt;
&lt;p&gt;相对于（2.20）精确解
  
    

    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.css&#34; integrity=&#34;sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq&#34; crossorigin=&#34;anonymous&#34;&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.js&#34; integrity=&#34;sha384-y23I5Q6l+B6vatafAwxRu/0oK/79VlbSz7Q9aiSZUvyWYIYsd+qj+o24G5ZU2zJz&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/contrib/auto-render.min.js&#34; integrity=&#34;sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI&#34; crossorigin=&#34;anonymous&#34;
            onload=&#34;renderMathInElement(document.body,
                {delimiters: [{left: &#39;$$\n&#39;, right: &#39;\n$$&#39;, display: true}, {left: &#39;$$&#39;, right: &#39;$$&#39;, display: false}, 
                              {left: &#39;\\[&#39;, right: &#39;\\]&#39;, display: true}, {left: &#39;\\(&#39;, right: &#39;\\)&#39;, display: false}]});&#34;&gt;&lt;/script&gt;
    
  




&lt;span class=&#34;katex&#34;&gt;
  \(u\)
&lt;/span&gt;
，有限元近似解


&lt;span class=&#34;katex&#34;&gt;
  \(u_h\)
&lt;/span&gt;
的误差


&lt;span class=&#34;katex&#34;&gt;
  \(e = u - u_h\)
&lt;/span&gt;
可以是&lt;code&gt;先验的&lt;/code&gt;，也可以是&lt;code&gt;后验的&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;先验&lt;/code&gt;误差估计表示精确（未知）解的规则性方面（terms of the regularity）的误差，并且可以提供有关有限元方法收敛顺序的有用信息。 &lt;code&gt;后验&lt;/code&gt;误差估计以则可表示为计算量（如残差）的误差，并且（可能）表示为辅助对偶问题的解，具体如下所述。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>有限元方法（二）【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0098/</link>
      <pubDate>Thu, 17 Dec 2020 22:22:30 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0098/</guid>
      <description>&lt;h1 id=&#34;i方法论2有限元方法二&#34;&gt;I.方法论》2·有限元方法（二）&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e4%ba%8c%e7%ab%a0-%e6%9c%89%e9%99%90%e5%85%83%e6%96%b9%e6%b3%95&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;h2 id=&#34;24-有限元函数空间&#34;&gt;2·4 有限元函数空间&lt;/h2&gt;
&lt;p&gt;在前面的讨论中，我们假设总可以构造无限维函数空间的离散子空间
  
    

    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.css&#34; integrity=&#34;sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq&#34; crossorigin=&#34;anonymous&#34;&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.js&#34; integrity=&#34;sha384-y23I5Q6l+B6vatafAwxRu/0oK/79VlbSz7Q9aiSZUvyWYIYsd+qj+o24G5ZU2zJz&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/contrib/auto-render.min.js&#34; integrity=&#34;sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI&#34; crossorigin=&#34;anonymous&#34;
            onload=&#34;renderMathInElement(document.body,
                {delimiters: [{left: &#39;$$\n&#39;, right: &#39;\n$$&#39;, display: true}, {left: &#39;$$&#39;, right: &#39;$$&#39;, display: false}, 
                              {left: &#39;\\[&#39;, right: &#39;\\]&#39;, display: true}, {left: &#39;\\(&#39;, right: &#39;\\)&#39;, display: false}]});&#34;&gt;&lt;/script&gt;
    
  




&lt;span class=&#34;katex&#34;&gt;
  \(V_h \subset V\)
&lt;/span&gt;
。有限元方法的一个核心方面是通过将由一组有限元定义的局部函数空间拼凑在一起来构造此类子空间。至此，我们对有限元函数空间的构造进行了总体概述，并将在第3章和第4章中回头讨论一些特定函数空间的构造：


&lt;span class=&#34;katex&#34;&gt;
  \(H^1, H(\mathrm{curl}), H(\mathrm{div}), L^2\)
&lt;/span&gt;
。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>有限元方法（一）【翻译】</title>
      <link>https://chaoskey.gitee.io/notes/docs/fem/0097/</link>
      <pubDate>Wed, 16 Dec 2020 16:49:14 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/fem/0097/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/julia/0094/&#34;&gt;有限元法解偏微分方程（FEniCS）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/julia/0096/&#34;&gt;有限元法求解牛顿流体（FEniCS）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这两篇笔记仅做入门之用。  为了深入掌握，建议阅读《Automated Solution of Differential Equations by the Finite Element Method》。 为此，我一边学习一边翻译权当笔记。&lt;/p&gt;
&lt;h1 id=&#34;i方法论2有限元方法一&#34;&gt;I.方法论》2.有限元方法（一）&lt;/h1&gt;
&lt;p&gt;【&lt;a href=&#34;https://chaoskey.gitee.io/notes/notes/docs/fem/#%e7%ac%ac%e4%ba%8c%e7%ab%a0-%e6%9c%89%e9%99%90%e5%85%83%e6%96%b9%e6%b3%95&#34;&gt;章节目录&lt;/a&gt;】&lt;/p&gt;
&lt;p&gt;有限元方法已经成为求解微分方程的通用方法。有限元方法的成功大部分可以归因于它的通用性和优雅性，它允许在一个通用框架内分析和求解来自科学所有领域的各种微分方程。有限元方法成功的另一个因素是公式的灵活性，可以通过选择近似的有限元空间来控制离散化的属性。&lt;/p&gt;
&lt;p&gt;在本章中，我们回顾有限元方法，并总结整本书中使用的一些基本概念和符号。&lt;/p&gt;
&lt;p&gt;在接下来的章节中，我们将更详细地讨论这些概念，并特别关注有限元方法的实现和自动化，这是FEniCS项目的一部分。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>有限元法求解牛顿流体（FEniCS）</title>
      <link>https://chaoskey.gitee.io/notes/docs/julia/0096/</link>
      <pubDate>Wed, 18 Nov 2020 22:17:27 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/julia/0096/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在Julia环境中，使用&lt;a href=&#34;https://gitee.com/chaoskey/FenicsPy.jl&#34;&gt;FenicsPy.jl&lt;/a&gt;调用&lt;code&gt;FEniCS&lt;/code&gt;库，求解偏微分方程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;纳维-斯托克斯方程组&#34;&gt;纳维-斯托克斯方程组&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;纳维-斯托克斯方程&lt;/strong&gt;:&lt;/p&gt;

  
    

    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.css&#34; integrity=&#34;sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq&#34; crossorigin=&#34;anonymous&#34;&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.js&#34; integrity=&#34;sha384-y23I5Q6l+B6vatafAwxRu/0oK/79VlbSz7Q9aiSZUvyWYIYsd+qj+o24G5ZU2zJz&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/contrib/auto-render.min.js&#34; integrity=&#34;sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI&#34; crossorigin=&#34;anonymous&#34;
            onload=&#34;renderMathInElement(document.body,
                {delimiters: [{left: &#39;$$\n&#39;, right: &#39;\n$$&#39;, display: true}, {left: &#39;$$&#39;, right: &#39;$$&#39;, display: false}, 
                              {left: &#39;\\[&#39;, right: &#39;\\]&#39;, display: true}, {left: &#39;\\(&#39;, right: &#39;\\)&#39;, display: false}]});&#34;&gt;&lt;/script&gt;
    
  




&lt;span class=&#34;katex&#34;&gt;
  \[
\color{red}{\frac{\partial \boldsymbol{u}}{\partial t}+(\boldsymbol{u} \cdot \nabla)\boldsymbol{u}=\frac{1}{\rho}\nabla\cdot \boldsymbol{\sigma}+\boldsymbol{f}}
\]
&lt;/span&gt;

&lt;p&gt;其中，张量


&lt;span class=&#34;katex&#34;&gt;
  \(\boldsymbol{\sigma}\)
&lt;/span&gt;
是&lt;code&gt;应力张量&lt;/code&gt;, 取决于具体流体的特性假设，比如：&lt;code&gt;牛顿流体&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;连续性方程&lt;/strong&gt;：&lt;/p&gt;



&lt;span class=&#34;katex&#34;&gt;
  \[
\frac{\partial \rho}{\partial t}+\nabla \cdot (\rho \boldsymbol{u})=0
\]
&lt;/span&gt;</description>
    </item>
    
    <item>
      <title>科学计算环境搭建（Win10&#43;WSL2&#43;Ubuntu）</title>
      <link>https://chaoskey.gitee.io/notes/docs/julia/0095/</link>
      <pubDate>Fri, 13 Nov 2020 20:09:40 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/julia/0095/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;系统平台： Win10_64 + WSL2 + Ubuntu&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目标：Python3.7+Julia1.5.3+JupyterLab+MatplotLib+SymPy+SciPy+FEniCS2019&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以Julia作为我主要的使用语言，确保能调用Python的库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目前FEniCS不支持Windows，所以我选择 Win10+WSL+Ubuntu&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;del&gt;目前FEniCS2019有问题（至少存在折磨我的问题），所以我选择FEniCS2018&lt;/del&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FEniCS2019的问题已经解决，所以我还是选择FEniCS2019（详细见后）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>有限元法解偏微分方程（FEniCS）</title>
      <link>https://chaoskey.gitee.io/notes/docs/julia/0094/</link>
      <pubDate>Fri, 13 Nov 2020 16:27:30 +0800</pubDate>
      
      <guid>https://chaoskey.gitee.io/notes/docs/julia/0094/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在Julia环境中，使用&lt;a href=&#34;https://gitee.com/chaoskey/FenicsPy.jl&#34;&gt;FenicsPy.jl&lt;/a&gt;调用&lt;code&gt;FEniCS&lt;/code&gt;库，求解偏微分方程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;以泊松方程第一边界条件为例&#34;&gt;以泊松方程（第一边界条件）为例&lt;/h1&gt;

  
    

    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.css&#34; integrity=&#34;sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq&#34; crossorigin=&#34;anonymous&#34;&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/katex.min.js&#34; integrity=&#34;sha384-y23I5Q6l+B6vatafAwxRu/0oK/79VlbSz7Q9aiSZUvyWYIYsd+qj+o24G5ZU2zJz&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
    
    
    &lt;script defer src=&#34;https://cdn.bootcss.com/KaTeX/0.11.1/contrib/auto-render.min.js&#34; integrity=&#34;sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI&#34; crossorigin=&#34;anonymous&#34;
            onload=&#34;renderMathInElement(document.body,
                {delimiters: [{left: &#39;$$\n&#39;, right: &#39;\n$$&#39;, display: true}, {left: &#39;$$&#39;, right: &#39;$$&#39;, display: false}, 
                              {left: &#39;\\[&#39;, right: &#39;\\]&#39;, display: true}, {left: &#39;\\(&#39;, right: &#39;\\)&#39;, display: false}]});&#34;&gt;&lt;/script&gt;
    
  




&lt;span class=&#34;katex&#34;&gt;
  \[
-\Delta u = f \qquad \boldsymbol{x} \in \Omega \\ u|_{\partial \Omega} =g
\]
&lt;/span&gt;

&lt;p&gt;范例而已， 本例提供的套路是通用的，大不了多看看文档。&lt;/p&gt;
&lt;p&gt;关键的地方，我特意列出相关链接。&lt;/p&gt;
&lt;p&gt;本文采用软件包： FEniCS。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
